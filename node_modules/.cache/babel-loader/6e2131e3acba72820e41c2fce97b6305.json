{"ast":null,"code":"var _jsxFileName = \"/Users/vrinda/Desktop/netflix-react-clone/src/ui/MediaCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { generateImageUrl, ImageSizes } from \"utils/tmdb\";\nimport TrailerModal from './TrailerModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MediaCard({\n  media,\n  mediaType,\n  isLarge\n}) {\n  _s();\n\n  const [isTrailerOpen, setTrailerOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"media-card\",\n      onClick: () => setTrailerOpen(true),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: classNames('media-card__poster', {\n          'media-card__poster--large': isLarge\n        }),\n        src: isLarge ? generateImageUrl(media.poster_path, ImageSizes.poster) : generateImageUrl(media.backdrop_path, ImageSizes.card),\n        alt: media.original_title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"media-card__cover\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media-card__name\",\n          children: media.title || media.name || media.original_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"media-card__description\",\n          children: media.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, media.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), isTrailerOpen && /*#__PURE__*/_jsxDEV(TrailerModal, {\n      mediaType: mediaType,\n      mediaId: media.id,\n      media: media,\n      onClose: () => setTrailerOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MediaCard, \"hcWDWsJNySoFWYqP2V5vDZEJzXw=\");\n\n_c = MediaCard;\nexport default MediaCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MediaCard\");","map":{"version":3,"sources":["/Users/vrinda/Desktop/netflix-react-clone/src/ui/MediaCard.js"],"names":["React","useState","classNames","generateImageUrl","ImageSizes","TrailerModal","MediaCard","media","mediaType","isLarge","isTrailerOpen","setTrailerOpen","poster_path","poster","backdrop_path","card","original_title","title","name","original_name","overview","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,SAAT;AAAoBC,EAAAA;AAApB,CAAnB,EAAkD;AAAA;;AAChD,QAAM,CAACC,aAAD,EAAgBC,cAAhB,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AAEA,sBACE;AAAA,4BACE;AAEE,MAAA,SAAS,EAAC,YAFZ;AAGE,MAAA,OAAO,EAAE,MAAMU,cAAc,CAAC,IAAD,CAH/B;AAAA,8BAKE;AACE,QAAA,SAAS,EAAET,UAAU,CACnB,oBADmB,EAEnB;AAAE,uCAA6BO;AAA/B,SAFmB,CADvB;AAKE,QAAA,GAAG,EACDA,OAAO,GACLN,gBAAgB,CAACI,KAAK,CAACK,WAAP,EAAoBR,UAAU,CAACS,MAA/B,CADX,GAELV,gBAAgB,CAACI,KAAK,CAACO,aAAP,EAAsBV,UAAU,CAACW,IAAjC,CARtB;AAUE,QAAA,GAAG,EAAER,KAAK,CAACS;AAVb;AAAA;AAAA;AAAA;AAAA,cALF,eAiBE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,oBACGT,KAAK,CAACU,KAAN,IAAeV,KAAK,CAACW,IAArB,IAA6BX,KAAK,CAACY;AADtC;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAA,oBACGZ,KAAK,CAACa;AADT;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA,OACOb,KAAK,CAACc,EADb;AAAA;AAAA;AAAA;AAAA,YADF,EA2BGX,aAAa,iBACZ,QAAC,YAAD;AACE,MAAA,SAAS,EAAEF,SADb;AAEE,MAAA,OAAO,EAAED,KAAK,CAACc,EAFjB;AAGE,MAAA,KAAK,EAAEd,KAHT;AAIE,MAAA,OAAO,EAAE,MAAMI,cAAc,CAAC,KAAD;AAJ/B;AAAA;AAAA;AAAA;AAAA,YA5BJ;AAAA,kBADF;AAsCD;;GAzCQL,S;;KAAAA,S;AA2CT,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { generateImageUrl, ImageSizes } from \"utils/tmdb\";\nimport TrailerModal from './TrailerModal';\n\nfunction MediaCard({ media, mediaType, isLarge }) {\n  const [isTrailerOpen, setTrailerOpen] = useState(false);\n\n  return (\n    <>\n      <div\n        key={media.id}\n        className=\"media-card\"\n        onClick={() => setTrailerOpen(true)}\n      >\n        <img\n          className={classNames(\n            'media-card__poster',\n            { 'media-card__poster--large': isLarge },\n          )}\n          src={\n            isLarge\n            ? generateImageUrl(media.poster_path, ImageSizes.poster)\n            : generateImageUrl(media.backdrop_path, ImageSizes.card)\n          }\n          alt={media.original_title}\n        />\n        <div className=\"media-card__cover\">\n          <div className=\"media-card__name\">\n            {media.title || media.name || media.original_name}\n          </div>\n          <div className=\"media-card__description\">\n            {media.overview}\n          </div>\n        </div>\n      </div>\n      {isTrailerOpen && (\n        <TrailerModal\n          mediaType={mediaType}\n          mediaId={media.id}\n          media={media}\n          onClose={() => setTrailerOpen(false)}\n        />\n      )}\n    </>\n  );\n}\n\nexport default MediaCard;\n"]},"metadata":{},"sourceType":"module"}